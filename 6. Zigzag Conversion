class Solution {
    public String convert(String s, int numRows) {
        // Base case: if numRows is 1 or greater than or equal to string length, return the string as is.
        if (numRows == 1 || s.length() <= numRows) {
            return s;
        }

        // Create a list of StringBuilder for each row
        StringBuilder[] rows = new StringBuilder[numRows];
        for (int i = 0; i < numRows; i++) {
            rows[i] = new StringBuilder();
        }

        // Initialize variables
        int curRow = 0;               // The current row we are filling
        boolean goingDown = false;    // Flag to indicate direction

        // Iterate over each character in the string
        for (char c : s.toCharArray()) {
            // Append the current character to the current row
            rows[curRow].append(c);

            // Change direction when reaching the top or bottom row
            if (curRow == 0 || curRow == numRows - 1) {
                goingDown = !goingDown;
            }

            // Move to the next row: either down or up
            curRow += goingDown ? 1 : -1;
        }

        // Combine all rows to get the final zigzag result
        StringBuilder result = new StringBuilder();
        for (StringBuilder row : rows) {
            result.append(row);
        }

        return result.toString();  // Return the zigzag converted string
    }
}
